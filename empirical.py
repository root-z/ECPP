from ecpp import atkin_morain
from nzmath.ecpp import ecpp, param_gen, quasi_primitive
from ecpp import curve_parameters
from miller_rabin import miller_rabin
import random
from hilbert import hilbert

slow_ns = {1606475880020429434205823188497, 55145088737, 39868093098543668111, 37163749179039507745104284885522719649083886797921}
prime = {1469264127174608819435920883418908401395902714016645228065953110536417686537910184628210934850283699}

def random_test():
    n = random.randrange(2**(32 * 5), 2**(33* 5))
    if n % 2 == 0:
        n += 1
    n = 35201546659608842026088328007565866231962578784643756647773109869245232364730066609837018108561065242031153677

    basic_test(n)

def basic_test(n):
    print n
    print miller_rabin(n, 10)
    print ecpp(n)

    print atkin_morain(n)


def small_test():
    #n = 35201546659608842026088328007565866231962578784643756647773109869245232364730066609837018108561065242031153677
    #params = [(-1, 0), (3148238074213049298184748360408504597457285255129492277522418308837485344060992374194032681202994031158685855L, 0), (30682785040784393099045533114519098349746849420602907222549615663800699679935926949389094585330957766039933492L, 0), (25596998038600007939559970541996623929140436236303621717729267303263133182683870416112814838865222105745577733L, 0)]
    n=17600773329804421013044164003782933115981289392321878318274335494333497909423750776833564592938824735089487193
    params = curve_parameters(-3, n)
    params2 = []

    print params
    print params2
    print len(params)
    print len(params2)

if __name__ == '__main__':
    print hilbert(-88)
    print hilbert(-123)
    n = 17600773329804421013044164003782933115981289392321878318274335494333497909423750776833564592938824735089487193
    #ecpp(n)
    atkin_morain(n)

    params = curve_parameters(-88, n)
    params2 =[]
    for param in param_gen(-88, n, quasi_primitive(n, False)):
        params2.append(param)
    print params
    print params2

    #[(0, 17600773329804421013044164003782933115981289392321878318274335494333497909423750776833564592938824735089487192L), (0, 17600773329804421013044164003782933115981289392321878318274335494333497909423750776833564592938824735089487188L), (0, 17600773329804421013044164003782933115981289392321878318274335494333497909423750776833564592938824735089487168L), (0, 17600773329804421013044164003782933115981289392321878318274335494333497909423750776833564592938824735089487068L), (0, 17600773329804421013044164003782933115981289392321878318274335494333497909423750776833564592938824735089486568L), (0, 17600773329804421013044164003782933115981289392321878318274335494333497909423750776833564592938824735089484068L)]
    #random_test()


    #(299122626537117421532123440069947258922203137143220160725728553363183559114474543939921013312192743788945565L, 17401358245446342732022748377069634943366487300893064877790516458758042203347434414206950584064029572563523483L)
